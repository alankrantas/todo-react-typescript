{"version":3,"sources":["components/Todo.tsx","components/Form.tsx","components/FilterButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todo","props","useState","isEditing","setEditing","name","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","trim","autoComplete","FilterButton","isPressed","setFilter","App","tasks","setTasks","filter","filterMap","All","Active","task","Completed","filterList","Object","keys","map","updatedTasks","editedTaskList","remainingTasks","taskList","tasksNoun","length","headingText","newTask","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DATA","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2f0ba4f.chunk.js","sourcesContent":["import { ChangeEvent, FunctionComponent, useState } from \"react\";\r\nimport { TodoItem } from \"../data/entities\"\r\n\r\ninterface Props extends TodoItem {\r\n    toggleTaskCompleted: (id: string) => void,\r\n    editTask: (id: string, newName: string) => void,\r\n    deleteTask: (id: string) => void;\r\n}\r\n\r\nexport const Todo: FunctionComponent<Props> = (props) => {\r\n\r\n    const [isEditing, setEditing] = useState<boolean>(false);\r\n    const [newName, setNewName] = useState<string>(props.name);\r\n\r\n    let handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    let handleSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    New name for \"{props.name}\"\r\n                </label>\r\n                <input\r\n                    id={props.id}\r\n                    className=\"todo-text\"\r\n                    type=\"text\"\r\n                    value={newName}\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn todo-cancel\"\r\n                    onClick={() => setEditing(false)}\r\n                >\r\n                    Cancel\r\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n                    Save\r\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input\r\n                    id={props.id}\r\n                    type=\"checkbox\"\r\n                    defaultChecked={props.completed}\r\n                    onChange={() => props.toggleTaskCompleted(props.id)}\r\n                />\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\r\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn__danger\"\r\n                    onClick={() => props.deleteTask(props.id)}\r\n                >\r\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}","import { ChangeEvent, FunctionComponent, useState } from \"react\";\r\n\r\ninterface Props {\r\n    addTask: (name: string) => void\r\n}\r\n\r\nexport const Form: FunctionComponent<Props> = (props) => {\r\n\r\n    const [name, setName] = useState<string>(\"\");\r\n\r\n    let handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    let handleSubmit = (e: ChangeEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        props.addTask(name.trim() !== \"\" ? name : \"(new todo task)\");\r\n        setName(\"\");\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} >\r\n            <h2 className=\"label-wrapper\">\r\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n                    What needs to be done?\r\n                </label>\r\n            </h2>\r\n            <input\r\n                type=\"text\"\r\n                id=\"new-todo-input\"\r\n                className=\"input input__lg\"\r\n                name=\"text\"\r\n                autoComplete=\"off\"\r\n                value={name}\r\n                onChange={handleChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n                Add\r\n            </button>\r\n        </form >\r\n    );\r\n}","import { FunctionComponent } from \"react\";\r\n\r\ninterface Props {\r\n    key: string,\r\n    name: string,\r\n    isPressed: boolean,\r\n    setFilter: (name: string) => any;\r\n}\r\n\r\nexport const FilterButton: FunctionComponent<Props> = (props) => {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn toggle-btn\"\r\n            aria-pressed={props.isPressed}\r\n            onClick={() => props.setFilter(props.name)}\r\n        >\r\n            <span className=\"visually-hidden\">Show </span>\r\n            <span>{props.name}</span>\r\n            <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    );\r\n}","import { FunctionComponent, useState } from \"react\";\nimport { Todo } from \"./components/Todo\";\nimport { Form } from \"./components/Form\";\nimport { FilterButton } from \"./components/FilterButton\";\nimport { TodoItem } from \"./data/entities\"\nimport { nanoid } from \"nanoid\";\n\ninterface Props {\n    tasks: TodoItem[];\n}\n\ntype filterOptions = {\n    [key: string]: any\n}\n\nexport const App: FunctionComponent<Props> = (props) => {\n\n    const [tasks, setTasks] = useState<TodoItem[]>(props.tasks);\n    const [filter, setFilter] = useState<string>(\"All\");\n\n    const filterMap: filterOptions = {\n        All: () => true,\n        Active: (task: TodoItem) => !task.completed,\n        Completed: (task: TodoItem) => task.completed\n    };\n    const FILTER_NAMES = Object.keys(filterMap);\n\n    const filterList = FILTER_NAMES.map(name => (\n        <FilterButton\n            key={name}\n            name={name}\n            isPressed={name === filter}\n            setFilter={setFilter}\n        />\n    ));\n\n    let addTask = (name: string) => {\n        const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n        setTasks([...tasks, newTask]);\n    };\n\n    let toggleTaskCompleted = (id: string) => {\n        const updatedTasks: TodoItem[] = tasks.map(task => {\n            if (id === task.id) {\n                return { ...task, completed: !task.completed }\n            }\n            return task;\n        });\n        setTasks(updatedTasks);\n    };\n\n    let editTask = (id: string, newName: string) => {\n        const editedTaskList: TodoItem[] = tasks.map(task => {\n            if (id === task.id) {\n                return { ...task, name: newName }\n            }\n            return task;\n        });\n        setTasks(editedTaskList);\n    };\n\n    let deleteTask = (id: string) => {\n        const remainingTasks: TodoItem[] = tasks.filter(task => id !== task.id);\n        setTasks(remainingTasks);\n    };\n\n    const taskList = tasks\n        .filter(filterMap[filter])\n        .map(task => (\n            <Todo\n                id={task.id}\n                name={task.name}\n                completed={task.completed}\n                key={task.id}\n                toggleTaskCompleted={toggleTaskCompleted}\n                deleteTask={deleteTask}\n                editTask={editTask}\n            />\n        ));\n\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n    return (\n        <div className=\"todoapp stack-large\">\n            <h1>TodoMatic</h1>\n            <Form addTask={addTask} />\n            <div className=\"filters btn-group stack-exception\">\n                {filterList}\n            </div>\n            <h2 id=\"list-heading\">\n                {headingText}\n            </h2>\n            <ul\n                className=\"todo-list stack-large stack-exception\"\n                aria-labelledby=\"list-heading\"\n            >\n                {taskList}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { TodoItem } from \"./data/entities\"\nimport { nanoid } from \"nanoid\";\n\nconst DATA: TodoItem[] = [\n    { name: \"Learn JavaScript\", completed: true, id: \"todo-\" + nanoid() },\n    { name: \"Understand TypeScript\", completed: false, id: \"todo-\" + nanoid() },\n    { name: \"Build website with React\", completed: false, id: \"todo-\" + nanoid() }\n];\n\nReactDOM.render(\n    <React.StrictMode>\n        <App tasks={DATA}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}